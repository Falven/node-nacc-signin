function EditableTableController(tableId, url, saveSuccess, saveFailure) {
    var table = $(tableId);
    var thead = table.find("thead");
    var tbody = table.find("tbody");
    table.find(".add").click(function() {
        var clone = table.find(".clone").clone(true).removeClass("clone");
        tbody.append(clone);
    });
    table.find(".remove").click(function() {
        $(this).parent().remove();
    });
    table.find(".save").click(function() {
        var headers = thead.find(".th:not(.add)");
        var rows = tbody.find(".tr:not(.clone)");
        var peers = [];
        rows.each(function() {
            var cells = $(this).find(".td:not(.remove)");
            var i = 0;
            var peer = {};
            headers.each(function() {
                peer[$(this).text()] = cells[i++].innerHTML;
            });
            peers.push(peer);
        });
        $.ajax({
            type: "POST",
            url: url,
            data: JSON.stringify(peers),
            contentType: "application/json",
            success: function(data) {
                window.alert(saveSuccess);
            },
            failure: function(errMsg) {
                window.alert(saveFailure);
            }
        });
    });
    table.find(".clear").click(function() {
        var clone = table.find(".clone").clone(true);
        $(tbody).empty();
        tbody.append(clone);
    });
}

function KeypadController(displays, numerals, resets, maxChars) {
    var i;
    if (numerals) {
        for (i = 0; i < numerals.length; ++i) {
            numerals[i].addEventListener("click", numeralKeyClicked, false);
        }
    }
    if (resets) {
        for (i = 0; i < resets.length; ++i) {
            resets[i].addEventListener("click", resetKeyClicked, false);
        }
    }
    function numeralKeyClicked(event) {
        if (displays) {
            for (var i = 0; i < displays.length; ++i) {
                var display = displays[i];
                if (display.value.length < maxChars) {
                    display.value += event.target.value;
                }
            }
        }
    }
    function resetKeyClicked() {
        if (displays) {
            for (var i = 0; i < displays.length; ++i) {
                displays[i].value = "";
            }
        }
    }
}

function PeerController(tutoringButton, mentoringButton, printingButton, table) {
    var tableHidden = true, tableOwner;
    if (null != tutoringButton) {
        tutoringButton.addEventListener("click", tutoringButtonClicked, false);
    }
    if (null != mentoringButton) {
        mentoringButton.addEventListener("click", mentoringButtonClicked, false);
    }
    if (null != printingButton) {
        printingButton.addEventListener("click", printingButtonClicked, false);
    }
    function ajaxRequestPeer(peer) {
        var xhttp = new XMLHttpRequest();
        xhttp.onreadystatechange = function() {
            if (xhttp.readyState === 4 && xhttp.status === 200) {
                if (tableOwner !== peer) {
                    clearTable();
                    populateTableHeader(peer);
                    populateTable(peer, JSON.parse(xhttp.responseText));
                    tableOwner = peer;
                }
            }
        };
        xhttp.open("POST", "/peers", true);
        xhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
        xhttp.send("peer=" + peer);
    }
    function clearTable() {
        var length = table.rows.length;
        while (length-- > 0) {
            table.deleteRow(0);
        }
    }
    function populateTableHeader(peer) {
        var row = table.createTHead().insertRow(0);
        row.insertCell(0).innerHTML = "Name";
        if (peer === "Tutoring") {
            row.insertCell(1).innerHTML = "Subject";
        }
    }
    function populateTable(peer, peerArray) {
        var key, row;
        var tbody = table.getElementsByTagName("tbody")[0];
        for (key in peerArray) {
            if (peerArray.hasOwnProperty(key)) {
                row = tbody.insertRow(-1);
                row.addEventListener("click", onRowClick, false);
                if (peer === "Tutoring") {
                    row.insertCell(-1).innerHTML = key;
                }
                row.insertCell(-1).innerHTML = peerArray[key];
            }
        }
    }
    function post(path, params) {
        var form = document.createElement("form");
        form.setAttribute("method", "post");
        form.setAttribute("action", path);
        for (var key in params) {
            if (params.hasOwnProperty(key)) {
                var hiddenField = document.createElement("input");
                hiddenField.setAttribute("type", "hidden");
                hiddenField.setAttribute("name", key);
                hiddenField.setAttribute("value", params[key]);
                form.appendChild(hiddenField);
            }
        }
        document.body.appendChild(form);
        form.submit();
    }
    function tryShowTable() {
        if (tableHidden) {
            table.style.setProperty("display", "table", "");
            tableHidden = false;
        }
    }
    function tutoringButtonClicked(event) {
        tryShowTable();
        ajaxRequestPeer("Tutoring");
    }
    function mentoringButtonClicked(event) {
        tryShowTable();
        ajaxRequestPeer("Mentoring");
    }
    function printingButtonClicked(event) {}
    function onRowClick(event) {
        post("confirm", {
            name: event.target.innerHTML
        });
    }
}

var NACC = {
    index: {
        init: function(element) {
            new KeypadController(document.getElementsByClassName("text-input"), document.getElementsByClassName("numeric"), document.getElementsByClassName("reset"), 9);
        }
    },
    admin: {
        init: function(element) {
            new KeypadController(document.getElementsByClassName("keypad-form-display"), document.getElementsByClassName("numeric"), document.getElementsByClassName("reset"), 4);
        }
    },
    dashboard: {
        init: function(element) {
            if (window.jQuery) {
                new EditableTableController("#tutors-table", "/admin/dashboard/tutors", "Succesfully saved your Tutor changes!", "There was a problem saving your Tutor changes :(");
                new EditableTableController("#mentors-table", "/admin/dashboard/mentors", "Succesfully saved your Mentor changes!", "There was a problem saving your Mentor changes :(");
                new EditableTableController("#students-table", "/admin/dashboard/students", "Succesfully saved your Student changes!", "There was a problem saving your Student changes :(");
            }
        }
    },
    mailto: {
        init: function(element) {
            var email = {
                part1: "mail",
                part2: "to",
                part3: ":",
                part4: "falven",
                part5: "@",
                part6: "rams.",
                part7: "colostate",
                part8: ".",
                part9: "ed",
                part10: "u",
                part11: "?Sub",
                part12: "ject",
                part13: "=NACC",
                part14: "%20",
                part15: "Login"
            };
            element.href = email.part1 + email.part2 + email.part3 + email.part4 + email.part5 + email.part6 + email.part7 + email.part8 + email.part9 + email.part10 + email.part11 + email.part12 + email.part13 + email.part14 + email.part15;
        }
    }
};

var UTIL = {
    fire: function(elementId) {
        var element = document.getElementById(elementId);
        if (element) {
            NACC[elementId].init(element);
        }
    },
    init: function() {
        UTIL.fire("index");
        UTIL.fire("admin");
        UTIL.fire("dashboard");
        UTIL.fire("mailto");
    }
};

function domLoaded() {
    UTIL.init();
}

document.addEventListener("DOMContentLoaded", domLoaded);